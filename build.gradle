buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.0'
group = 'net.decentstudio.gamblingaddon' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'sw-gamblingaddon'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'

    accessTransformer = file('src/main/resources/META-INF/casino_at.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            jvmArgs "-Dfml.coreMods.load=com.assolb.hooklib.hooks.NarutoCraftHookLoader"

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            def mcuser = project.hasProperty("mcuser") ? project.getProperty("mcuser") : "Player${new Random().nextInt(1000)}"
            args "--username=" + mcuser.toString()
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2859'

//    implementation "io.gitlab.hohserg.elegant.networking:elegant-networking-1.12:3.14"
    annotationProcessor "io.gitlab.hohserg.elegant.networking:annotation-processor:3.14"

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    //implementation fg.deobf('software.bernie.geckolib:forge-1.12.2-geckolib:3.0.5')

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    implementation fileTree(dir: 'libs', include: '*.jar')
}

jar {
    manifest {
        attributes([
            "Specification-Title": "jutsuaddon",
            "Specification-Vendor": "jutsuaddonbyby",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"jutsuaddonbyby",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

sourceSets.main {
    output.resourcesDir = output.classesDirs.singleFile
}

//ext {
//    constsFilePath = "src/main/java/ua/byby/jutsuaddon/util/Consts.java"
//    constsBackupPath = "src/main/java/ua/byby/jutsuaddon/util/Consts.java.bak"
//}

//def replaceIsClientValue(boolean isClient) {
//    def constsFile = file(constsFilePath)
//
//    // Read the current content of the file
//    def currentContent = constsFile.text
//
//    // Replace the IS_CLIENT value
//    def newContent = currentContent.replaceAll(
//            /public static final boolean IS_CLIENT = (true|false);/,
//            "public static final boolean IS_CLIENT = ${isClient};"
//    )
//
//    // Write the modified content back to the file
//    constsFile.text = newContent
//}
//
//task buildClient {
//    group = "build"
//    description = "Builds the client jar with IS_CLIENT = true"
//    doFirst {
//        replaceIsClientValue(true)
//    }
//    dependsOn 'build'
//    doLast {
//        copy {
//            from "$buildDir/libs/${archivesBaseName}-${version}.jar"
//            into "$buildDir/libs/"
//            rename { "${archivesBaseName}-${version}-client.jar" }
//        }
//    }
//}
//
//task buildServer {
//    group = "build"
//    description = "Builds the server jar with IS_CLIENT = false"
//    doFirst {
//        replaceIsClientValue(false)
//    }
//    dependsOn 'build'
//    doLast {
//        copy {
//            from "$buildDir/libs/${archivesBaseName}-${version}.jar"
//            into "$buildDir/libs/"
//            rename { "${archivesBaseName}-${version}-server.jar" }
//        }
//    }
//}
//
//task buildClientServer {
//    group = "build"
//    description = "Builds both client and server jars"
//
//    dependsOn buildClient
//    finalizedBy buildServer
//}


